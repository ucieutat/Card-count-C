/*
    Probabilities with a hand of cards
*/

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define HAND 7
#define NUM_CARDS 52
#define NUM_HAND_GENER 1000000

typedef enum suit{hearts,diamonds,spades,clubs} suit;

typedef struct card{
    suit s;
    short pip;}card;


const char* getsuitname(suit s) //return the name of suit
{
    switch (s)
    {
        case hearts:return "Hearts";
        case diamonds:return "Diamonds";
        case spades:return "Spades";
        case clubs:return "Clubs";
        default:return "Error";
    }
}


void pickcard(int random) //Print the value of card picked
{
    switch(random%13)
    {
        case 0:
            printf("%2s","A");
            break;
        case 10:
            printf("%2s","J");
            break;
        case 11:
            printf("%2s","Q");
            break;
        case 12:
            printf("%2s","K");
            break;
        default:
            printf("%2d",random%13+1);
    }
    printf(" of %s\n",getsuitname(random/13));
}

void sort_deck(card hand_card[]) //Sort deck by value of pip
{
    int a,b;
    card temp;
    for( a=0; a<HAND-1; a++)
	{
		for( b=a+1; b<HAND; b++ )
		{
			if( hand_card[a].pip > hand_card[b].pip )
			{
				temp = hand_card[a];
				hand_card[a] = hand_card[b];
				hand_card[b] = temp;
			}
		}
	}
}

/* Evaluate if hand has pair or double pair*/
int pairs(card p[])
{
	/* test the first two cards */
	if( p[0].pip==p[1].pip )
	{
		/* check for a second pair */
		if( p[2].pip==p[3].pip || p[3].pip==p[4].pip || p[4].pip==p[5].pip || p[5].pip==p[6].pip)
			return(2);
		else
			return(1);
	}

	/* test the second two cards */
	if( p[1].pip==p[2].pip )
	{
		/* check for a second pair */
		if( p[3].pip==p[4].pip || p[4].pip==p[5].pip || p[5].pip==p[6].pip)
			return(2);
		else
			return(1);
	}
	if( p[2].pip==p[3].pip ) //And so on
    {
        if( p[4].pip==p[5].pip || p[5].pip==p[6].pip)
			return(2);
		else
			return(1);
    }
	if( p[3].pip==p[4].pip )
    {
        if( p[5].pip==p[6].pip)
			return(2);
		else
			return(1);
    }
    if( p[4].pip==p[5].pip )
        return(1);
    if( p[5].pip==p[6].pip )
        return(1);
    return(0);
}

/* Evaluate if hand has three of kind*/
int three(card p[])
{
    int i;
    int threeofkind=0;
    for (i=0;i<HAND;i++)
    {
        if (p[i].pip==p[i+1].pip && p[i+1].pip==p[i+2].pip)
        {
            threeofkind++;
        }
    }
    return(threeofkind);
}
/* Evaluate if hand has a full house*/
int full(card p[])
{
    int i,j;
    int full=0;
    for (i=0;i<HAND;i++)
    {
        if (p[i].pip==p[i+1].pip && p[i+1].pip==p[i+2].pip)
        {
            for (j=0;j<HAND;j++)
            {
                if (p[j].pip==p[j+1].pip && p[i].pip!=p[j].pip)
                {
                    full=1;
                }
            }
        }
    }
    return (full);
}

/* Evaluate if hand has four of a kind*/
int four(card p[])
{
	/* test the first four cards */
	if( p[0].pip==p[1].pip && p[1].pip==p[2].pip && p[2].pip==p[3].pip )
		return(1);
	/* test the next four cards */
	if( p[1].pip==p[2].pip && p[2].pip==p[3].pip && p[3].pip==p[4].pip )
		return(1);
    if( p[2].pip==p[3].pip && p[3].pip==p[4].pip && p[4].pip==p[5].pip ) //and so on
		return(1);
    if( p[3].pip==p[4].pip && p[4].pip==p[5].pip && p[5].pip==p[6].pip )
		return(1);

	return(0);
}

/* Function that takes an array of int (to count the number of each combination) and a hand of cards
count the number of each combination in hand*/
void count_combinations(int count_hands[], card hand[])
{
    if (pairs(hand)>0)
    {
/*the nested structure is because if a hand has three of a kind it also has a pair but we want to count only the three, and so on*/
        if (three(hand)>0)
        {
            if (full(hand)>0)
            {
                count_hands[4]++;
            }
            if (four(hand)>0)
            {
               count_hands[5]++;
            }
            else
            {
                count_hands[3]++;
            }
        }
        else if (pairs(hand)==2)
        {
            count_hands[2]++;
        }
        else if (pairs(hand)==1)
        {
            count_hands[1]++;
        }
    }
    else
        count_hands[0]++;
}
int main()
{
    int j=0;
    int count_hands[6]={0,0,0,0,0,0}; //each 0 counts a different combination (1st : high card, 2nd : pair...)
    while(j<NUM_HAND_GENER) //here we iterate 1M times
    {
        int deck[NUM_CARDS]; //check if the card already in hand, each card in deck is represented by 1 (if already picked) or 0
        card hand[7]={{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}};
        int i=0,c=0,x=0;
        srand((unsigned)time(NULL));
        for(x=0;x<NUM_CARDS;x++) //fill the deck with 0 (shuffle deck)
            deck[x] = 0;
        while (i<HAND) //pick 7 cards
        {
            for(;;) //generate a rand until one that is not already picked
            {
                c=rand()%NUM_CARDS; //generate a number between 0 and 51 (0=Ace of hearts, 13=Ace of diamonds...)
                if (deck[c]==0)
                {
                    deck[c]=1;
                    hand[i].s=c/13;  //0-13 : Hearts, 13-26 : Diamonds, 26-39 : Spades, 39-52 : Clubs (order decided in enum suit)
                    hand[i].pip=c%13;
                    pickcard(c);
                    break;
                }
            }
            i++;
        }
        sort_deck(hand); //sort the deck so it's easier to count the combinations
        count_combinations(count_hands,hand); //increment count_hands with the correct combinations in hand
        j++;
    }
    printf("Number of high card : %d\n Number of pairs : %d\n \
Number of double pairs : %d\n Number of three of a kind : %d\n \
Number of full house : %d\n Number of four of a kind : %d\n",count_hands[0],count_hands[1],\
           count_hands[2],count_hands[3],\
           count_hands[4],count_hands[5]);
    return 0;
}
